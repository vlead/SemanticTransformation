#+TITLE: Renarration Web Application
#+AUTHOR: Sai
#+DATE: [2016-06-24 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Version/Branch History
we are planning to use the same document (with different versions) to document
the work for our Rennarration web Application document.

- =v1.0= :: Initial version to start the doc & development of the system. 


* Goal

The goal of this project is to develop a web based Semantic Transformation System. This will enable Renarration by allowing for Annotation of existing web content. Along with Annotation, DOM node changes will also be allowed.

This Semantic Transformation System is to be built as collection of several web applications and services working together to provide an overall semantically meaningful service to the end-user. 


* Overview
By Semantic Transformation we mean that an existing, published web page should be modifiable or transformable by any arbitrary user. In other words, the assumption is that the source page is already published and existing on the web. The modifications -- which could be CRUD operations on content -- should be performable by any arbitrary user, who may be somebody other than the author. The modified page with new semantic is what we are calling Semantically Transformed page. This transformed page exists in addition to the original source. It can be thought of as another version or variant of the original source. Source content -- which is already on the web -- would not be destroyed by this type of Semantic Transformation.

We are using the term /Renarration/ to refer to the new Semantically Transformed variant of the original source page. The process of page Renarration requires two things: One, the ability to /restructure/ the original source document, and two, the ability to /transform/ the newly structured document. 


* Requirements
At the system level, our intent is to take in some web content and transform it. The transformation of the input content can be manual (by experts from a crowd sourced environment) or automatic (as a web service which is triggered by some event).

#+CAPTION: General View of the semantic transformation system
  [[./diagrams/syst_view1.png]]

In a web related context, the input is a HTML document. The output is also a HTML document. However, due to transformation, the output may or may not have
+ modified DOM elements
+ modified content
+ modified tags
+ in/excluded scripts

The output /O/, therefore, is a function /F/ of expert made modifications, and
input /I/. The Input will be in HTML. Output will also be HTML but potentially enhanced
with new DOM structures, new tags, new flow, new content etc. Expert
modifications will be made by Renarrators. They will potentially annotate,
change tags, insert scripts, modify content etc.  

#+CAPTION: Web Content related vView of our semantic transformation system
  [[./diagrams/syst_view2.png]]

At the highest level, our System requirements are
+ (Rq-F-1) Develop a web based system that is able to take an HTML marked up web page as input and output a user or system modified HTML page. 
+ (Rq-F-2) The user should be allowed to add, delete or modify content, flow or tags.
+ (Rq-F-3) The user should also be allowed to inject new scripts into the input document.
+ (Rq-F-4) The changes made by the user must persist.

The system requirements can be further divided into a grid of requirements: On one side we can have the item on which we wish to operate upon. On the other side we can have the operation we seek. Here then is the table of requirements

|              | Create(C) | Read (R) | Update (U) | Delete (D) |
|--------------+-----------+----------+------------+------------|
| Node Content | RqS1      | RqS2     | RqS3       | RqS4       |
| Node         | RqS5      | RqS6     | RqS7       | RqS8       |
| Tags         | RqS9      | RqS10    | RqS11      | RqS12      |
| Script       | RqS13     | RqS14    | RqS15      | RqS16      |
| Doc Flow     | RqS17     | RqS18    | RqS19      | RqS20      |
|              |           |          |            |            |

This grid can now be converted into a set of requirements.

| Req Set | RqID | Requirement Description                                                                        |
|---------+------+------------------------------------------------------------------------------------------------|
| RqS1    |      | The content in a DOM node should be creatable. i.e. new content should be addable.             |
| RqS2    |      | The content in a DOM node should be readable.                                                  |
| RqS3    |      | The content in a DOM node should be replaceable.                                               |
| RqS4    |      | The content in a DOM node should be deleteable.                                                |
| RqS5    |      | Should be able to add a new DOM.                                                               |
| RqS6    |      | Should be able to read the content of a DOM node. Same as RqS2?                                |
| RqS7    |      | Should be able to replace a DOM node with another DOM element.                                 |
| RqS8    |      | Should be able to delete a DOM node                                                            |
| RqS9    |      | Given a portion of a DOM node, that content should be tagged as per user defn.                 |
| RqS10   |      | Given a portion of a DOM node, that content's tag should be accessible.                        |
| RqS11   |      | Given a portion of a DOM node, that content's tag should be replaceable with a user given tag. |
| RqS12   |      | Given a portion of a DOM node, that content's tag should be deletable.                         |
| RqS13   |      | Should be able to create and inject a new script within the web document.                      |
| RqS14   |      | Should be able to access (read) an existing script within the web document.                    |
| RqS15   |      | Should be able to replace an existing script with a user given script.                         |
| RqS16   |      | Should be able to delete a user identified script within a web document.                       |
| RqS17   |      | Should be able to create a new document (node) flow.                                           |
| RqS18   |      | Should be able to access the current document flow.                                            |
| RqS19   |      | Should be able to replace the current flow with a user defined doc flow.                       |
| RqS20   |      | Should be able to delete the existing document flow.                                           |
|         |      |                                                                                                |

These system requirements would deliver us a Framework which would enable us to apply renarration concepts to specific cases.

In this Sematic Transformation project work, we wish to appy renarration to two use cases: 1) English Learning, 2) Language Translation activities as well. In practice what this means is that an HTML page should be renarratable into 1) a Phonetic alphabet, and/ or 2) some other non-English language. For this our requirements are:

+ (Rq-Ws-1) Develop an instance of renarration that does phonetic word / page translations. That is, given an English text page, when the user selects a word, page or a DOM node, the system should modify the selected content into its English-phonetic equivalent content. These changes need not persist.

+ (Rq-Ws-2) Develop an instance of renarration that does date format change. That is, given an text page containing a date format, when the user selects the date and identifies a new format, the system should modify the selected content into its  equivalent new date format. These changes need not persist.


* Use Cases
Here are few use cases for our system
+ A user goes to a web app page, fetches a document and notices that there are
  multiple renarrations available for it. The user can choose whichever version
  he wishes to access.
+ A user access a renarrated document from our web app
+ A user fetches a page and renarrates it. The renarrations can include
  modifications of content, tags, DOM nodes, and document flow. The
  modification operations include basic CRUD (create, read, update, delete)
  functions.
+ A user wishes to save (persistence) the changes he has made.  

From a specific applications point of view, here are some use case scenarios
+ A user fetches a page and wishes to get a word, or an entire node translated.
+ A user fetches a page and wishes to get a word, or an entire node
  Phonetically modified
+ A user fetches a page and wishes to get the audio for a word, or an entire node
  that she has earmarked
+ A user wishes to arbitrarily tag a word that she earmarks on the page


* Design
We begin with a few assumptions:
+ we are dealing with a HTML document (as opposed to a XML doc)
+ we are dealing with a static HTML doc (as opposed to a page with content that gets created on the run)
+ we are dealing with 

Originally we conceived an elaborate system design (explained in the History
section) with SSSRenarratorStudio, SSSConfigurator, SSSStorage, SSSBrowser
components. These were to be reused from existing Alipi code. However, over
time, with new functionality and more library code reuse and for simplicity
sake, we have abandoned reuse of Alipi and are working on a more JavaScript and
Selinium based model.

Essentially the system is supposed to do two things: One, be able to annotate
the source document, and two, semantically transform the source document. This
is shown here as a ladder of abstraction.

#+CAPTION: ladder of abstraction showing two primary functionss of our semantic transformation system
  [[./diagrams/ladder_of_abstraction.png]]

The annotation of the document is the first function of our system. This is
seen as an overlay on the original document. As a document goes through
multiple renarrations,we can foresee multiple layers of annotation as
well. That is, an HTML page can be tagged with RDFa/schema1 once and with
RDFa/schema2 at yet another time. Also, the second annotation need not be in
RDFa. 

#+CAPTION: Annotation is seen as an overlay on the existing document.
  [[./diagrams/overlay.png]] 

For a JavaScript based design we are proposing to use micro-services pattern of
architecture. The various renarrations on the page will be provided as
services. The services will be pegged on the source document by using a Joiner
code. The Joiner will be like a Document Manager which will, through a UI,
allow the user to use one of the micro services on the page. The micro-services
will potentially be independently developed.

#+CAPTION: Micro services & joiner based system architecture
  [[./diagrams/joiner_arch.png]]


* Development
** Strategy for Development
Here is our highlevel approach strategy for development
+ we narrow our scope to something very specific
+ we add variability and features in increments
+ we optimize at the end (after we have the basic variability, features in our working code)
+ we will reuse SWtStore 
+ we will reuse existing Schemas (from places like Schema.org)

Our system will be developed in stages. Each will be released as per the release plan of r0, r1

*** r0
In this release we aim to develop a web app that is able to fetch a page based on user's input. This page should allow for words to be chosen on the page for Phonetic and Language transformation. The emphasis of this release is to test out the use of repository, to test out use of libraries, to fix coding language, to get acquainted with the overall system.

[[./implementation.org]]


*** r1
In this release we aim to modularize and seperate the code. We aim to develop a Document Manager (called Joiner) which effectively integrates all the Web Services. The joiner will focus on most of the Framework requirements given in the Requirements section. 

The web services (micro services) will implement some of the features like Phonetics, language translations, Unit translations etc. These are going to leverage the Joiner but they will be seperate from the Joiner code.

[[./implementation.org]]


* Implementation
We will deliver the system in releases titled r0, r1, r2... Each release will
be implemented, archived in [[https://github.com/vlead/SemanticTransformation][this]]  GitHub repository and finally deployed on the
web behind IIIT-Hyd firewall. GitHub repository - https://github.com/vlead/SemanticTransformation.

On GitHub, the coding will be done in seperate cloned repository. The final code will be pulled into the [[https://github.com/vlead/SemanticTransformation][VLEAD repository]] after adequate review. 

Joiner code and WebServices code will be seperately developed. They will each have their own strategy for development and deployment.

** r0
In this release the implementation is given in 
+ code & explanation for how we  [[./selenium/selenium.org][inject]] JavaScript code into an existing
  page. This is the Selinium work.
+ [[./webservices/webservices.org][webservices code & explanation]]
+ [[./annolet/annolet.org][UI for the system]]


** r1
In this release the implementation is given in 
+ [[./selinium.org][selinium code]]
+ [[./webservices.org][webservices code & explanation]]
+ [[./annolet.org][UI for the system]]


* Unit Test

  About unit testing


* Design & Development History
Historically Alipi was the inspiration for rennarration work. A new system was
conceived to be based on this Alipi code. However, we evolved the design in
such a way that we are now not using Alipi but more of a injected JavaScript
code. The injected code is that of Joiner, which is essentially a document
manager, which helps user to use rennarration services, which are provided as
micro services.

The earlier system description is like this.
** Components from an earlier design
This Semantic Transformation web application is also referred to as Semantic Style Sheets or Renarration.

The Semantic Transformation system will have the following multiple components:  
1. SSS Renarrator Studio tool- This can be a web application / portal which allows one to markup a existing page. That is, annotation of an existing page with new structure happens here. Output of this tool is the restructured document. 
2. SSS Browser tool - This can be a web application / portal or physically the SSS Renarrator Studio tool. This tool allows the users to view the transformed pages. The transformations can happen manually, or through web services (which have to be developed seperately and outside this tool)
3. SSS Storage tool - This can be a web application which stores the annotation / markup information. This is how the restructured informaiton persists.
4. SSS Configurator tool - This is a web application which enables a user to define or set his or her chosen Document Data Types of Namespaces. These are in-turn used to create the markup tags to be used by the SSS Renarrator Studio  to be applied as new overlay ontop of the existing, source HTML page. 


* Software Development Life Cycle  (SDLC)
We are planning to have a agile style development philosophy. 


